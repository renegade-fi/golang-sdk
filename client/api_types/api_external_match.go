// Package api_types provides API data structures for the Renegade SDK
package api_types //nolint:revive

import (
	"errors"
	"math/big"
)

// ApiExternalOrder is an order from outside of the darkpool, generated by a client
// requesting an external match
type ApiExternalOrder struct { //nolint:revive
	// The mint (erc20 address) of the base asset
	// As a hex string
	BaseMint string `json:"base_mint"`
	// The mint (erc20 address) of the quote asset
	// As a hex string
	QuoteMint string `json:"quote_mint"`
	// The amount of the base asset to buy/sell
	BaseAmount Amount `json:"base_amount"`
	// The amount of the quote asset to buy/sell
	QuoteAmount Amount `json:"quote_amount"`
	// The exact output amount of the base token
	// If specified, the relayer's matching engine will attempt to fill the order
	// to result in exactly this base amount, net of fees
	ExactBaseAmountOutput Amount `json:"exact_base_output"`
	// The exact output amount of the quote token
	// If specified, the relayer's matching engine will attempt to fill the order
	// to result in exactly this quote amount, net of fees
	ExactQuoteAmountOutput Amount `json:"exact_quote_output"`
	// The side of the order
	Side string `json:"side"`
	// The minimum fill amount to cross the order at
	// Specified in units of the base asset
	MinFillSize Amount `json:"min_fill_size"`
}

// ApiExternalOrderBuilder helps construct ApiExternalOrder with validation
type ApiExternalOrderBuilder struct { //nolint:revive
	order ApiExternalOrder
}

// NewExternalOrderBuilder creates a new builder
func NewExternalOrderBuilder() *ApiExternalOrderBuilder {
	return &ApiExternalOrderBuilder{
		order: ApiExternalOrder{
			BaseMint:               "",
			QuoteMint:              "",
			BaseAmount:             Amount(*big.NewInt(0)),
			QuoteAmount:            Amount(*big.NewInt(0)),
			ExactBaseAmountOutput:  Amount(*big.NewInt(0)),
			ExactQuoteAmountOutput: Amount(*big.NewInt(0)),
			Side:                   "",
			MinFillSize:            Amount(*big.NewInt(0)),
		},
	}
}

// WithBaseMint sets the base mint
func (b *ApiExternalOrderBuilder) WithBaseMint(mint string) *ApiExternalOrderBuilder {
	b.order.BaseMint = mint
	return b
}

// WithQuoteMint sets the quote mint
func (b *ApiExternalOrderBuilder) WithQuoteMint(mint string) *ApiExternalOrderBuilder {
	b.order.QuoteMint = mint
	return b
}

// WithBaseAmount sets the base amount
func (b *ApiExternalOrderBuilder) WithBaseAmount(amount Amount) *ApiExternalOrderBuilder {
	b.order.BaseAmount = amount
	return b
}

// WithQuoteAmount sets the quote amount
func (b *ApiExternalOrderBuilder) WithQuoteAmount(amount Amount) *ApiExternalOrderBuilder {
	b.order.QuoteAmount = amount
	return b
}

// WithExactBaseAmountOutput sets the exact base output amount
// If specified, the relayer's matching engine will attempt to fill the order
// to result in exactly this base amount, net of fees
func (b *ApiExternalOrderBuilder) WithExactBaseAmountOutput(amount Amount) *ApiExternalOrderBuilder {
	b.order.ExactBaseAmountOutput = amount
	return b
}

// WithExactQuoteAmountOutput sets the exact quote output amount
// If specified, the relayer's matching engine will attempt to fill the order
// to result in exactly this quote amount, net of fees
func (b *ApiExternalOrderBuilder) WithExactQuoteAmountOutput(amount Amount) *ApiExternalOrderBuilder {
	b.order.ExactQuoteAmountOutput = amount
	return b
}

// WithSide sets the side
func (b *ApiExternalOrderBuilder) WithSide(side string) *ApiExternalOrderBuilder {
	b.order.Side = side
	return b
}

// WithMinFillSize sets the minimum fill size
func (b *ApiExternalOrderBuilder) WithMinFillSize(size Amount) *ApiExternalOrderBuilder {
	b.order.MinFillSize = size
	return b
}

// Build validates and returns the ApiExternalOrder
func (b *ApiExternalOrderBuilder) Build() (*ApiExternalOrder, error) {
	if b.order.BaseMint == "" {
		return nil, errors.New("base mint is required")
	}
	if b.order.QuoteMint == "" {
		return nil, errors.New("quote mint is required")
	}
	if b.order.Side == "" {
		return nil, errors.New("side is required")
	}
	amountUnset := b.order.BaseAmount.IsZero() && b.order.QuoteAmount.IsZero() && b.order.ExactBaseAmountOutput.IsZero() && b.order.ExactQuoteAmountOutput.IsZero()
	if amountUnset {
		return nil, errors.New("one of `BaseAmount`, `QuoteAmount`, `ExactBaseAmountOutput`, or `ExactQuoteAmountOutput` must be set")
	}
	return &b.order, nil
}

// ApiExternalAssetTransfer represents a single transfer between the external client and darkpool
type ApiExternalAssetTransfer struct { //nolint:revive
	Mint   string `json:"mint"`
	Amount Amount `json:"amount"`
}

// ApiExternalQuote is a quote from the relayer for an external order
type ApiExternalQuote struct { //nolint:revive
	Order       ApiExternalOrder         `json:"order"`
	MatchResult ApiExternalMatchResult   `json:"match_result"`
	Fees        ApiFee                   `json:"fees"`
	Send        ApiExternalAssetTransfer `json:"send"`
	Receive     ApiExternalAssetTransfer `json:"receive"`
	Price       TimestampedPrice         `json:"price"`
	Timestamp   uint64                   `json:"timestamp"`
}

// ApiSignedQuote is a quote from the relayer, signed with the relayer's admin API key
// This allows a client to submit an authorized quote to the relayer and receive back an
// assembled settlement transaction at the quoted price
type ApiSignedQuote struct { //nolint:revive
	Quote     ApiExternalQuote `json:"quote"`
	Signature string           `json:"signature"`
	// The signed gas sponsorship info, if sponsorship was requested
	GasSponsorshipInfo *ApiSignedGasSponsorshipInfo
}

// ApiExternalMatchBundle contains a match and a transaction that the client can submit on-chain
type ApiExternalMatchBundle struct { //nolint:revive
	MatchResult  ApiExternalMatchResult   `json:"match_result"`
	Fees         ApiFee                   `json:"fees"`
	Receive      ApiExternalAssetTransfer `json:"receive"`
	Send         ApiExternalAssetTransfer `json:"send"`
	SettlementTx ApiSettlementTransaction `json:"settlement_tx"`
}

// ApiExternalMatchResult is the result of a request to generate an external match
type ApiExternalMatchResult struct { //nolint:revive
	QuoteMint   string `json:"quote_mint"`
	BaseMint    string `json:"base_mint"`
	QuoteAmount Amount `json:"quote_amount"`
	BaseAmount  Amount `json:"base_amount"`
	Direction   string `json:"direction"`
}

// ApiSettlementTransaction is an EVM transaction parameterization for settling an external match
type ApiSettlementTransaction struct { //nolint:revive
	Type  string `json:"type"`
	To    string `json:"to"`
	Data  string `json:"data"`
	Value string `json:"value"`
}

// ApiExternalMatchFee represents the fees for a given asset in external matches
type ApiExternalMatchFee struct { //nolint:revive
	RelayerFee  string `json:"relayer_fee"`
	ProtocolFee string `json:"protocol_fee"`
}

// ApiSignedGasSponsorshipInfo contains signed metadata regarding gas sponsorship for a quote
type ApiSignedGasSponsorshipInfo struct { //nolint:revive
	// The gas sponsorship info
	GasSponsorshipInfo ApiGasSponsorshipInfo `json:"gas_sponsorship_info"`
	// The auth server's signature over the gas sponsorship info
	Signature string `json:"signature"`
}

// ApiGasSponsorshipInfo contains metadata regarding gas sponsorship for a quote
type ApiGasSponsorshipInfo struct { //nolint:revive
	// The amount to be refunded as a result of gas sponsorship.
	// This amount is firm, it will not change when the quote is assembled.
	RefundAmount Amount `json:"refund_amount"`
	// Whether the refund is in terms of native ETH.
	RefundNativeETH bool `json:"refund_native_eth"`
	// The address to which the refund will be sent, if set explicitly.
	RefundAddress *string `json:"refund_address,omitempty"`
}
