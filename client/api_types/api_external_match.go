package api_types

import (
	"errors"
	"math/big"
)

// ApiExternalOrder is an order from outside of the darkpool, generated by a client
// requesting an external match
type ApiExternalOrder struct {
	// The mint (erc20 address) of the base asset
	// As a hex string
	BaseMint string `json:"base_mint"`
	// The mint (erc20 address) of the quote asset
	// As a hex string
	QuoteMint string `json:"quote_mint"`
	// The amount of the base asset to buy/sell
	BaseAmount Amount `json:"base_amount"`
	// The amount of the quote asset to buy/sell
	QuoteAmount Amount `json:"quote_amount"`
	// The side of the order
	Side string `json:"side"`
	// The minimum fill amount to cross the order at
	// Specified in units of the base asset
	MinFillSize Amount `json:"min_fill_size"`
}

// ApiExternalOrderBuilder helps construct ApiExternalOrder with validation
type ApiExternalOrderBuilder struct {
	order ApiExternalOrder
}

// NewExternalOrderBuilder creates a new builder
func NewExternalOrderBuilder() *ApiExternalOrderBuilder {
	return &ApiExternalOrderBuilder{
		order: ApiExternalOrder{
			BaseMint:    "",
			QuoteMint:   "",
			BaseAmount:  Amount(*big.NewInt(0)),
			QuoteAmount: Amount(*big.NewInt(0)),
			Side:        "",
			MinFillSize: Amount(*big.NewInt(0)),
		},
	}
}

// WithBaseMint sets the base mint
func (b *ApiExternalOrderBuilder) WithBaseMint(mint string) *ApiExternalOrderBuilder {
	b.order.BaseMint = mint
	return b
}

// WithQuoteMint sets the quote mint
func (b *ApiExternalOrderBuilder) WithQuoteMint(mint string) *ApiExternalOrderBuilder {
	b.order.QuoteMint = mint
	return b
}

// WithBaseAmount sets the base amount
func (b *ApiExternalOrderBuilder) WithBaseAmount(amount Amount) *ApiExternalOrderBuilder {
	b.order.BaseAmount = amount
	return b
}

// WithQuoteAmount sets the quote amount
func (b *ApiExternalOrderBuilder) WithQuoteAmount(amount Amount) *ApiExternalOrderBuilder {
	b.order.QuoteAmount = amount
	return b
}

// WithSide sets the side
func (b *ApiExternalOrderBuilder) WithSide(side string) *ApiExternalOrderBuilder {
	b.order.Side = side
	return b
}

// WithMinFillSize sets the minimum fill size
func (b *ApiExternalOrderBuilder) WithMinFillSize(size Amount) *ApiExternalOrderBuilder {
	b.order.MinFillSize = size
	return b
}

// Build validates and returns the ApiExternalOrder
func (b *ApiExternalOrderBuilder) Build() (*ApiExternalOrder, error) {
	if b.order.BaseMint == "" {
		return nil, errors.New("base mint is required")
	}
	if b.order.QuoteMint == "" {
		return nil, errors.New("quote mint is required")
	}
	if b.order.Side == "" {
		return nil, errors.New("side is required")
	}
	if b.order.BaseAmount.IsZero() && b.order.QuoteAmount.IsZero() {
		return nil, errors.New("either base amount or quote amount must be set")
	}
	return &b.order, nil
}

// ApiExternalMatchBundle contains a match and a transaction that the client can submit on-chain
type ApiExternalMatchBundle struct {
	MatchResult  ApiExternalMatchResult   `json:"match_result"`
	SettlementTx ApiSettlementTransaction `json:"settlement_tx"`
}

// ApiExternalMatchResult is the result of a request to generate an external match
type ApiExternalMatchResult struct {
	QuoteMint   string `json:"quote_mint"`
	BaseMint    string `json:"base_mint"`
	QuoteAmount Amount `json:"quote_amount"`
	BaseAmount  Amount `json:"base_amount"`
	Direction   string `json:"direction"`
}

// ApiSettlementTransaction is an EVM transaction parameterization for settling an external match
type ApiSettlementTransaction struct {
	Type string `json:"type"`
	To   string `json:"to"`
	Data string `json:"data"`
}
